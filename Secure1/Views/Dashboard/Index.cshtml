@*No @model here because viewmodel is built in linq EF parts; there is no hand crafted viewmodel*@
@{
	ViewData["Title"] = "Dashboard";
}

<div class="row" style="padding: 5px 3px 4px 3px; border-radius: 8px; margin-bottom:10px;">
	<div style="padding: 4px 4px 4px 4px; max-width: 600px; background-color:lavender; border: 1px solid grey; border-radius: 8px; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);">
		<table>
			<thead></thead>
			<tbody>
				<tr>
					<td colspan="2" style="padding: 4px 3px 4px 3px;">
						<b>USER:</b> @Model.FirstName @Model.LastName
					</td>
				</tr>
				<tr>
					<td style="padding: 4px 3px 4px 3px;">
						<b>ORGINAZATION:</b> @Model.OrganizationNavigation.OrgName
					</td>
					<td style="padding: 4px 3px 4px 3px;">
						<b>CREATED:</b> @Model.OrganizationNavigation.CreateDate
					</td>
				</tr>
			</tbody>
		</table>
	</div>
</div>
<div class="container-fluid">
	<div class="row">
		<div class="col-sm-4">
			<div class="card card-style">
				<div class="card-header card-header-style">
					<button class="myButton-sm" title="Add a Project">Add</button>
					<button class="myButton-sm" title="Show or Hide removed Projects">Show Removed</button>
				</div>
				<div class="card-block">
					<div class="card-text card-text-style">
						<table>
							<thead>
								<tr>
									<th>Desc</th>
									<th>Industry</th>
								</tr>
							</thead>
							<tbody data-bind="foreach: serverData().Project()">
								<tr style="cursor:pointer;" data-bind="click: function() { $root.selectProject($data) }, css: { 'selected': $root.SelectedProj() == $data } ">
									<td data-bind="text: $data.Id()"></td>
									<td data-bind="text: $data.Desc()"></td>
									<td data-bind="text: $data.Industry()"></td>
									<td><a>Remove</a></td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
		<div class="col-sm-4">
			<div class="card card-style">
				<div class="card-header card-header-style">
					<button class="myButton-sm" title="Add a Project">Add</button>
					<button class="myButton-sm" title="Show or Hide removed Projects">Show Removed</button>
				</div>
				<div class="card-block">
					<div class="card-text card-text-style">

						<strong class="card-title" data-bind="ifnot: SelectedProj">No Project is selected</strong>
						<table data-bind="visible: SelectedProj">
							<thead>
								<tr>
									<th>Name</th>
									<th>Type</th>
								</tr>
							</thead>
							<tbody data-bind="foreach: things()">
								<tr style="cursor:pointer;" data-bind="click: function() { $root.selectThing($data) }, css: { 'selected': $root.SelectedThing() == $data } ">
									<td data-bind="text: $data.Name()"></td>
									<td data-bind="text: $data.Type()"></td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
		<div class="col-sm-4">
			<div class="card card-style">
				<div class="card-header card-header-style">
					<button class="myButton-sm" title="Add a Project">Add</button>
					<button class="myButton-sm" title="Show or Hide removed Projects">Show Removed</button>
				</div>
				<div class="card-block">
					<div class="card-text card-text-style">

						<strong class="card-title" data-bind="ifnot: SelectedThing">No Thing is selected</strong>
						<table data-bind="visible: SelectedThing">
							<thead>
								<tr>
									<th>Name</th>
									<th>Desc</th>
								</tr>
							</thead>
							<tbody data-bind="foreach: versions()">
								<tr>
									<td data-bind="text: $data.Name()"></td>
									<td data-bind="text: $data.Desc()"></td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script src="~/js/site.js"></script>
	<script src="~/lib/knockout/dist/knockout.mapping.js"></script>
	<script>

function koMapModel() {
	var self = this;

	self.things = ko.observable(undefined);
	self.versions = ko.observable(undefined);
	self.SelectedProj = ko.observable(undefined);
	self.SelectedThing = ko.observable(undefined);

		self.serverData = ko.observable(ko.mapping.fromJS(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model))));

	self.selectProject = function (Proj) {
		self.SelectedProj(Proj);
		self.things(Proj.Thing);
		self.SelectedThing(undefined);
	};

	self.selectThing = function (Thing) {
		self.SelectedThing(Thing);
		self.versions(Thing.Version);
	};
}
ko.applyBindings(new koMapModel());	

	</script>

	@await Html.PartialAsync("_ValidationScriptsPartial")
}